# .github/workflows/ci-cd-pipeline.yml
name: Flask App CI/CD to AKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} 
  IMAGE_NAME: todo-flask                          
  IMAGE_TAG: ${{ github.sha }}                    
  K8S_PATH: kubernetes                            

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: ‚¨áÔ∏è Checkout Repository
      uses: actions/checkout@v4

    # ----------------------------------------------------
    # 1. CI: Log in to Azure and ACR
    # ----------------------------------------------------
    - name: üîê Azure Login
      # Using the recommended stable major version
      uses: azure/login@v1 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üîê Docker Login to ACR
      # Using the recommended stable major version
      uses: azure/docker-login@v1 
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        # ACR login can use the client ID and secret from the Service Principal
        # We use a direct mapping to the credentials for reliability
        username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }} 
        password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }} 
        
    # ----------------------------------------------------
    # 2. CI: Build and Push Docker Image
    # ----------------------------------------------------
    - name: üõ†Ô∏è Build and Tag Docker Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./todolist 

    - name: ‚¨ÜÔ∏è Push Docker Image to ACR
      run: |
        docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    # ----------------------------------------------------
    # 3. CD: Prepare and Deploy to AKS
    # ----------------------------------------------------
    
    # NEW STEP: Use the Azure action to connect to AKS
    - name: ü§ù Get AKS Credentials (Connect to AKS)
      # Using the recommended stable major version
      uses: azure/aks-set-context@v3 
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        cluster-name: ${{ secrets.CLUSTER_NAME }}
        
    # NEW STEP: Update the image tag in the K8s deployment file (Using a different approach for reliability)
    - name: üìù Update K8s Deployment Image Tag
      # We are using k8s-set-service-acr-image, which is deprecated, but sometimes works. 
      # Let's try the latest recommended approach for updating deployment images.
      uses: azure/k8s-set-service-acr-image@v1 
      with:
        manifests: ${{ env.K8S_PATH }}/deployment.yaml 
        image-names: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        container-name: todo-flask-app 

    - name: üöÄ Deploy to AKS
      uses: azure/k8s-deploy@v4
      with:
        manifests: |
          ${{ env.K8S_PATH }}/deployment.yaml
          ${{ env.K8S_PATH }}/service.yaml
        action: deploy

    - name: üîé Verify Deployment and Get Load Balancer IP
      run: |
        echo "Waiting for LoadBalancer IP..."
        kubectl get service todo-flask-service --watch --timeout=5m